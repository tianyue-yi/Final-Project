let a;
let m;

function setup() {
  createCanvas(800, 600);
  a = new Attractor (330, 300);
  m = new Mover (600, 0);
}

function draw() {
  background(220);
  m.update();
  m.show();
  a.attract(m);
  a.display ();

}

class Attractor { // nature of code
  constructor (x, y) {
    this.location = createVector (x, y);
    this.mass = 36;
    this.r = sqrt(this.mass) * 2;
  }
  
  display () {
    fill (20);
    noStroke()
    ellipse (this.location.x, this.location.y, this.r * 2, this.r * 2);
  }
  
  attract (mover) {
    let force = p5.Vector.sub(this.location, mover.pos);
    let distanceSq = constrain(force.magSq(), 50, 200); // magSq = (x*x + y*y + z*z)
    let G = 0.6;
    let strength = (G * (this.mass * mover.mass)) / distanceSq; // The formula for gravity 
        
    force.setMag (strength); // // SLOW DOWN?
    mover.applyForce (force); // CHANGE DIRECTIONS
  }
}

class Mover { // the coding train
  constructor (x, y) {
    this.pos = createVector (x, y);
    this.vel = p5.Vector.random2D();
    this.vel.mult(5);
    this.acc = createVector (0, 0);
    this.mass = 25;
    this.r = sqrt (this.mass) * 2; // r = mass^0.5 * 2
    this.angle = 0;
  }
  
  applyForce (force) {
    let f = p5.Vector.div (0.5 * force, this.mass);
    this.acc.add (f);
  }
  
  update() {
    this.vel.add (this.acc);
    this.pos.add (this.vel);
    this.acc.set (0, 0);
  }
  
  show () {
    stroke (0);
    strokeWeight (2);
    fill (220);
    push();
    translate (this.pos.x, this.pos.y);
    this.angle = this.vel.heading();
    triangle (this.r - 2, this.r + 10, this.r + 10, this.r, this.r + 10, this.r - 20);
    triangle (this.r + 22, this.r + 10, this.r + 10, this.r, this.r + 10, this.r - 20);
    pop();
  }
}
